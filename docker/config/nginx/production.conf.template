proxy_cache_path  /var/cache/nginx/stanford_api levels=1 keys_zone=stanford_api:10m;

upstream stanford_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:/webapps/stanford/run/daphne.sock fail_timeout=0;
}

server {
    server_name ${STANFORD_HOST};
    listen 80;
    location /hub/ {
        proxy_pass http://stanford_server;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400;
    }

    location /client/ {
        proxy_pass http://stanford_server;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400;
    }

    location ~ /.well-known/acme-challenge {
        allow all;
        root /usr/share/nginx/html;
    }

    location / {
    return 301 https://${STANFORD_HOST}$request_uri;
    }

}

server {


    listen 443 ssl;
    server_name ${STANFORD_HOST};
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_tokens off;

    ssl_buffer_size 8k;

    ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

    ssl_ecdh_curve secp384r1;
    ssl_session_tickets off;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4;

    ssl_certificate /etc/letsencrypt/live/${STANFORD_HOST}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${STANFORD_HOST}/privkey.pem;

    gzip            on;
    gzip_min_length 1000;
    gzip_proxied    expired no-cache no-store private auth;
    gzip_types      text/plain application/xml application/json;
   
    access_log /webapps/stanford/logs/nginx-access.log;
    error_log /webapps/stanford/logs/nginx-error.log;
 
    location /static/ {
        alias   /webapps/stanford/static/;
    }
    
    location /media/ {
        alias   /webapps/stanford/media/;
    }
   

    location / {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we dont want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  Its also safe to set if youre
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        proxy_buffering off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://stanford_server;
            break;
        }
    expires 30d;
    }

    # Error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
        root /webapps/stanford/static/;
    }
}
