version: '3.4'
services:
  interfaceserver:
    build: .
    image: public.ecr.aws/t6n9y7s9/docker-repo/emerge-learning:latest
    command: sh /entry/entrypoint-interface.sh
    user: stanford
    working_dir: /stanford
    expose:
      - "8000"
    ports:
      - "8000:8000"
    env_file:
      - docker/docker.env
    depends_on:
      - database
      - redis
      - reactserver
    volumes:
      - ./stanford:/stanford
  rqworker:
    image: public.ecr.aws/t6n9y7s9/docker-repo/emerge-learning:latest
    command: /entry/entrypoint-rqworker.sh
    user: stanford
    working_dir: /stanford
    expose:
      - "8000"
    env_file:
      - docker/docker.env
    depends_on:
      - database
      - redis
  scheduler:
    image: public.ecr.aws/t6n9y7s9/docker-repo/emerge-learning:latest
    command: /entry/entrypoint-rqscheduler.sh
    user: stanford
    working_dir: /stanford
    expose:
      - "8000"
    env_file:
      - docker/docker.env
    depends_on:
      - database
      - redis
  redis:
    image: redis:3.0-alpine
  database:
    image: postgres:9.5
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - db_data:/var/lib/postgresql/data
  #added
  reactserver:
    build:
      context: .
      target: react-pkg
    ports:
      - "3000:3000"
    working_dir: /stanford
    command: sh -c "npm install package.json; node react_server.js"
    volumes:
      - ./stanford/:/stanford/
volumes:
  db_data:
